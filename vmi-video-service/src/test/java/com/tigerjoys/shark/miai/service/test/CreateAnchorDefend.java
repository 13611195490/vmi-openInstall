package com.tigerjoys.shark.miai.service.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import com.tigerjoys.nbs.common.utils.Tools;
import com.tigerjoys.nbs.mybatis.core.page.PageModel;
import com.tigerjoys.nbs.mybatis.core.sql.Restrictions;
import com.tigerjoys.shark.miai.inter.contract.IAnchorDefendContract;
import com.tigerjoys.shark.miai.inter.contract.IAnchorIntimateRankingsContract;
import com.tigerjoys.shark.miai.inter.entity.AnchorDefendEntity;
import com.tigerjoys.shark.miai.inter.entity.AnchorIntimateRankingsEntity;
import com.tigerjoys.shark.miai.utils.BaseTestConfig;

public class CreateAnchorDefend extends BaseTestConfig {

	@Autowired
	private IAnchorDefendContract anchorDefendContract;

	@Autowired
	private IAnchorIntimateRankingsContract anchorIntimateRankingsContract;
	
	//@Test
	public void testCreateAnchorEvaluation() throws Exception {
		List<Long> vUserids = new ArrayList<>();
		vUserids.add(65418691671490304L);
		vUserids.add(65418693063999232L);
		vUserids.add(65418693535858432L);
		vUserids.add(65418693967871744L);
		vUserids.add(65418697029713664L);
		vUserids.add(65418697558195968L);
		vUserids.add(65418698199924480L);
		vUserids.add(65418701460995840L);
		vUserids.add(65418701876231936L);
		vUserids.add(65418702280982272L);
		vUserids.add(87152674235023616L);
		vUserids.add(32441318881952000L);
		vUserids.add(89140787889111296L);
		vUserids.add(132314928682959104L);
		vUserids.add(132372351454085376L);
		vUserids.add(132484736267387136L);
		vUserids.add(132502929635606784L);
		vUserids.add(133325677402325248L);
		vUserids.add(133326790398640384L);
		vUserids.add(133329034900734208L);
		vUserids.add(133506185107144960L);
		vUserids.add(133535350623633664L);
		vUserids.add(133709344461095168L);
		vUserids.add(134282491784659200L);
		vUserids.add(134609783935271168L);
		vUserids.add(134819997018030336L);
		vUserids.add(135203187031343360L);
		vUserids.add(135406655255937280L);
		vUserids.add(135730787866706176L);
		vUserids.add(135746091768414464L);
		vUserids.add(135759007125143808L);
		vUserids.add(135856481984643328L);
		vUserids.add(135873896581759232L);
		vUserids.add(136032410761494784L);
		vUserids.add(136635472922345728L);
		vUserids.add(137130093578354944L);
		vUserids.add(137224557351207168L);
		vUserids.add(137670354794512640L);
		vUserids.add(137910381342425344L);
		vUserids.add(138142273901756672L);
		vUserids.add(139735307573592320L);
		vUserids.add(139936989293117696L);
		vUserids.add(136321559510974720L);
		vUserids.add(139938131190284544L);
		vUserids.add(140051410520703232L);
		vUserids.add(140571545920667904L);
		vUserids.add(140596694176825600L);
		vUserids.add(140604859968717056L);
		vUserids.add(140622993547133184L);
		vUserids.add(140643866800881920L);
		vUserids.add(140855517238067456L);
		vUserids.add(141120769439629568L);
		vUserids.add(141307976152580352L);
		vUserids.add(141651505301225728L);
		vUserids.add(143697638542344448L);
		vUserids.add(143855966188798208L);
		vUserids.add(144629847791042816L);
		vUserids.add(135116485508006144L);
		vUserids.add(144773438031069440L);
		vUserids.add(145539358917722368L);
		vUserids.add(138236813792837888L);
		vUserids.add(146553391617736960L);
		vUserids.add(147028255761826048L);
		vUserids.add(147354953120284928L);
		vUserids.add(147594259866910976L);
		vUserids.add(148085475796648192L);
		vUserids.add(142008511734284544L);
		vUserids.add(149136464626647296L);
		vUserids.add(149137059324428544L);
		vUserids.add(149300571248066816L);
		vUserids.add(149300944205578496L);
		vUserids.add(149152702933303552L);
		vUserids.add(149380563350913280L);
		vUserids.add(149637836612632832L);
		vUserids.add(149638275116630272L);
		vUserids.add(149638826317381888L);
		vUserids.add(149639319989059840L);
		vUserids.add(149639861484192000L);
		vUserids.add(149680189509533952L);
		vUserids.add(149857125684806144L);
		vUserids.add(149902626786443520L);
		vUserids.add(150024574795317504L);
		vUserids.add(150028220176072960L);
		vUserids.add(150028437881422080L);
		vUserids.add(150028655632908544L);
		vUserids.add(150028852995883264L);
		vUserids.add(150029075723911424L);
		vUserids.add(150029335798022400L);
		vUserids.add(150029601786102016L);
		vUserids.add(150029854773936384L);
		vUserids.add(150030168933597440L);
		vUserids.add(150030485280588032L);
		vUserids.add(150030812692152576L);
		vUserids.add(150031225357140224L);
		vUserids.add(150031527628046592L);
		vUserids.add(150031973136531712L);
		vUserids.add(150032306824872192L);
		vUserids.add(150032561993744640L);
		vUserids.add(150032829567271168L);
		vUserids.add(150033214887493888L);
		vUserids.add(150033704545222912L);
		vUserids.add(150034090777706752L);
		vUserids.add(150034342645661952L);
		vUserids.add(150034633661153536L);
		vUserids.add(150035547167981824L);
		vUserids.add(150035816628945152L);
		vUserids.add(150036373680750848L);
		vUserids.add(150037273644171520L);
		vUserids.add(150037648153575680L);
		vUserids.add(150038579551207680L);
		vUserids.add(150039359609962752L);
		vUserids.add(150039598194557184L);
		vUserids.add(150040318547394816L);
		vUserids.add(144173658772930816L);
		vUserids.add(150312021009695232L);
		vUserids.add(151698164458520832L);
		vUserids.add(151887988995981568L);
		vUserids.add(142276339156713728L);
		vUserids.add(152379390521573632L);
		vUserids.add(152384295695089920L);
		vUserids.add(152396055468638464L);
		vUserids.add(152396187928953088L);
		vUserids.add(152396289477247232L);
		vUserids.add(152396411405664512L);
		vUserids.add(152396545948451072L);
		vUserids.add(152396732223783168L);
		vUserids.add(152396868534468864L);
		vUserids.add(152397159516406016L);
		vUserids.add(152397698977300736L);
		vUserids.add(152398007915053312L);
		vUserids.add(152456420158145024L);
		vUserids.add(152464049752310272L);
		vUserids.add(152805138602459392L);
		vUserids.add(152807662445199872L);
		vUserids.add(152816779517821184L);
		vUserids.add(152819471461974528L);
		vUserids.add(152819379319406848L);
		vUserids.add(152831808413696512L);
		vUserids.add(152946675862798592L);
		vUserids.add(153165189141823744L);
		vUserids.add(153310968754012416L);
		vUserids.add(153454039321870592L);
		vUserids.add(153464295731036672L);
		vUserids.add(153724232931541504L);
		vUserids.add(154074255988949504L);
		vUserids.add(154244827190460928L);
		vUserids.add(154337536009896448L);
		vUserids.add(154338251296014848L);
		vUserids.add(154258511308587264L);
		vUserids.add(154210277364138240L);
		vUserids.add(154392008136392960L);
		vUserids.add(154394218918379776L);
		vUserids.add(154556344674877696L);
		vUserids.add(154548688304275968L);
		vUserids.add(154564154072564224L);
		vUserids.add(154629532737929728L);
		vUserids.add(153481864143766016L);
		vUserids.add(154883985070162176L);
		vUserids.add(154900130313601280L);
		vUserids.add(154900157071163904L);
		vUserids.add(154900519534526720L);
		vUserids.add(154900449575633152L);
		vUserids.add(154900280928960768L);
		vUserids.add(154903081564307712L);
		vUserids.add(154903611292320000L);
		vUserids.add(154901200305717760L);
		vUserids.add(154905304404918784L);
		vUserids.add(154911428216684800L);
		vUserids.add(154912223553192192L);
		vUserids.add(154929087207506432L);
		vUserids.add(154948803378610432L);
		vUserids.add(153470690618573056L);
		vUserids.add(155082247528055296L);
		vUserids.add(155090718132601344L);
		vUserids.add(154884611197960704L);
		vUserids.add(155261005679624704L);
		vUserids.add(155261315926000128L);
		vUserids.add(155281547140858368L);
		vUserids.add(155282152265679360L);
		vUserids.add(155298322117099776L);
		vUserids.add(155394695862747648L);
		vUserids.add(155462952560951552L);
		vUserids.add(154796849985815040L);
		vUserids.add(155517156946149632L);
		vUserids.add(144055719035994368L);
		vUserids.add(155822136448057856L);
		vUserids.add(155872118358212864L);
		vUserids.add(155883095241851392L);
		vUserids.add(155899741576692224L);
		vUserids.add(155821949130441216L);
		vUserids.add(155966649437061376L);
		vUserids.add(155974754432516352L);
		vUserids.add(155987580909846784L);
		vUserids.add(156038128918921472L);
		vUserids.add(132097176806424832L);
		vUserids.add(153969852059550208L);
		vUserids.add(156233395588890880L);
		vUserids.add(156353645418447360L);
		vUserids.add(156388104268218880L);
		vUserids.add(156396241649991936L);
		
		List<Long> users = new ArrayList<>();
		users.add(83532314035945728L);
		users.add(83550355100598528L);
		users.add(83584446617420032L);
		users.add(83594041654051072L);
		users.add(83560851753206016L);
		users.add(83581384001650944L);
		users.add(83661749292695808L);
		users.add(83585853032562944L);
		users.add(83652788436926720L);
		users.add(83526063237431552L);
		users.add(83700376714412288L);
		users.add(83675607373775104L);
		users.add(83553201344807168L);
		users.add(83624486051578112L);
		users.add(83686697090482432L);
		users.add(83637409016774912L);
		users.add(83574064941170944L);
		users.add(83699468125405440L);
		users.add(83540371210043648L);
		users.add(83604030638588160L);
		users.add(83663079172276480L);
		users.add(83584734053073152L);
		users.add(83573122504130816L);
		users.add(83696345185059072L);
		users.add(83593471880921344L);
		users.add(83602853322621184L);
		users.add(83545830004424960L);
		users.add(83573511720861952L);
		users.add(83587252778762496L);
		users.add(83556731373814016L);
		users.add(83649863323025664L);
		users.add(83531681794949376L);
		users.add(83597927150321920L);
		users.add(83703137537425664L);
		users.add(83527997052748032L);
		users.add(83550776363909376L);
		users.add(83583715489415424L);
		users.add(83577236776616192L);
		users.add(83606961488199936L);
		users.add(83577951603458304L);
		users.add(83575644729966848L);
		users.add(83675546902397184L);
		users.add(83564675832283392L);
		users.add(83703780373233920L);
		users.add(83710185511649536L);
		users.add(83671874424340736L);
		users.add(83587939036102912L);
		users.add(83704608460964096L);
		users.add(83605879821238528L);
		users.add(83570600532050176L);
		users.add(83556293587042560L);
		users.add(83529327842492672L);
		users.add(83631074082619648L);
		users.add(83600195987767552L);
		users.add(83684000461291776L);
		users.add(83693993224896768L);
		users.add(83642000353591552L);
		users.add(83563698586714368L);
		users.add(83613969387946240L);
		users.add(83526919779320064L);
		users.add(83589185782481152L);
		users.add(83528954733986048L);
		users.add(83705170736775424L);
		users.add(83637216085082368L);
		users.add(83688058515423488L);
		users.add(83643523678667008L);
		users.add(83654894849949952L);
		users.add(83690452045332736L);
		users.add(83707513939230976L);
		users.add(83577090017919232L);
		users.add(83659398259474688L);
		users.add(83585195118231808L);
		users.add(83528485049532672L);
		users.add(83578941153018112L);
		users.add(83593852895691008L);
		users.add(83582849460011264L);
		users.add(83584021325480192L);
		users.add(83554753197441280L);
		users.add(83709273344901376L);
		users.add(83669385258008832L);
		users.add(83568513173750016L);
		users.add(83653640958574848L);
		users.add(83653783103537408L);
		users.add(83605727760941312L);
		users.add(83540305609031936L);
		users.add(83643415744545024L);
		users.add(83528908506464512L);
		users.add(83604280038195456L);
		users.add(83624553365963008L);
		users.add(83595015229604096L);
		users.add(83545826019836160L);
		users.add(83693345811005696L);
		users.add(83652887063888128L);
		users.add(83594791692075264L);
		users.add(83588707577299200L);
		users.add(83703132036595968L);
		users.add(83611393342898432L);
		users.add(83530511089205504L);
		users.add(83563715030483200L);
		users.add(83682730239394048L);
		users.add(83591436181766400L);
		users.add(83548960471449856L);
		users.add(83693732915904768L);
		users.add(83532238051934464L);
		users.add(83557867117936896L);
		users.add(83555303485931776L);
		users.add(83584433482957056L);
		users.add(83582726837436672L);
		users.add(83537911531766016L);
		users.add(83576794134937856L);
		users.add(83577952291324160L);
		users.add(83695759674900736L);
		users.add(83686189208502528L);
		users.add(83594233017073920L);
		users.add(83579143576420608L);
		users.add(83587944853602560L);
		users.add(83539950888354048L);
		users.add(83533161056764160L);
		users.add(83582528002261248L);
		users.add(83547813589352704L);
		users.add(83553757727621376L);
		users.add(83533160482144512L);
		users.add(83647871947178240L);
		users.add(83528392435106048L);
		users.add(83648149880635648L);
		users.add(83572485903155456L);
		users.add(83589145041109248L);
		users.add(83529538736292096L);
		users.add(83709671432585472L);
		users.add(83704472053809408L);
		users.add(83569550605484288L);
		users.add(83542759438352640L);
		users.add(83651365368299776L);
		users.add(83605953424982272L);
		users.add(83566247551238400L);
		users.add(83580931088122112L);
		users.add(83576356266377472L);
		users.add(83706750145986816L);
		users.add(83675988940095744L);
		users.add(83653449314533632L);
		users.add(83563680479904000L);
		users.add(83548600052809984L);
		users.add(83591594749526272L);
		users.add(83664515754950912L);
		users.add(83541858067742976L);
		users.add(83559859806601472L);
		users.add(83601241176867072L);
		users.add(83595626287268096L);
		users.add(83666213296734464L);
		users.add(83526759833731328L);
		users.add(83672197253628160L);
		users.add(83708389527453952L);
		users.add(83706289133256960L);
		users.add(83678749687611648L);
		users.add(83577432736596224L);
		users.add(83556174437351680L);
		users.add(83593484375752960L);
		users.add(83699795184648448L);
		users.add(83543521832796416L);
		users.add(83694497849999616L);
		users.add(83612676315480320L);
		users.add(83626427351630080L);
		users.add(83571225867124992L);
		users.add(83663904839893248L);
		users.add(83592670882103552L);
		users.add(83528647058718976L);
		users.add(83560431678980352L);
		users.add(83604693739176192L);
		users.add(83550466071396608L);
		users.add(83656886280323328L);
		users.add(83685075755008256L);
		users.add(83689977487098112L);
		users.add(83584103768719616L);
		users.add(83576952419582208L);
		users.add(83694024919154944L);
		users.add(83693281134838016L);
		users.add(83536882176164096L);
		users.add(83595670652518656L);
		users.add(83697304560795904L);
		users.add(83652897063108864L);
		users.add(83671114282238208L);
		users.add(83690362238992640L);
		users.add(83552248375869696L);
		users.add(83668365966639360L);
		users.add(83536944400761088L);
		users.add(83563339403297024L);
		users.add(83525795720528128L);
		users.add(83647589041373440L);
		users.add(83603496703688960L);
		users.add(83653351585153280L);
		users.add(83656552610857216L);
		users.add(83690375388135680L);
		users.add(83681925824315648L);
		users.add(83600264923250944L);
		users.add(83582707518472448L);
		users.add(83530530938749184L);
		users.add(83526415904997632L);
		users.add(83537850601111808L);
		users.add(83558502607421696L);
		
		//处理拨打电话和评论相关的处理
		/*
		PageModel pageModel = PageModel.getPageModel();
		pageModel.addLimitField(2, 300);
		pageModel.addQuery(Restrictions.lt("fr", 3));
		pageModel.addQuery(Restrictions.eq("sex", 1));
		pageModel.desc("create_time");
		List<UserEntity> users = userContract.load(pageModel);
		*/
		
		
		for (Long anchor : vUserids) {
			Collections.shuffle(users);
			int i = 0;
			int rand = getRandomNumber(2, 4);
			for(int j = 0; j < rand; j++) {
				AnchorDefendEntity t = new AnchorDefendEntity();
				t.setAnchorid(anchor);
				t.setUserid(users.get(i));
				t.setLevel(15);
				t.setStart_date(Tools.getDate("2019-10-16"));
				t.setEnd_date(Tools.getDate("2020-12-30"));
				t.setCreate_time(new Date());
				t.setUpdate_time(new Date());
				anchorDefendContract.insert(t);
				i++;
			}
			rand = getRandomNumber(3, 5);
			for(int j = 0; j < rand; j++) {
				AnchorDefendEntity t = new AnchorDefendEntity();
				t.setAnchorid(anchor);
				t.setUserid(users.get(i));
				t.setLevel(10);
				t.setStart_date(Tools.getDate("2019-10-16"));
				t.setEnd_date(Tools.getDate("2020-12-30"));
				t.setCreate_time(new Date());
				t.setUpdate_time(new Date());
				anchorDefendContract.insert(t);
				i++;
			}
			rand = getRandomNumber(3, 5);
			for(int j = 0; j < rand; j++) {
				AnchorDefendEntity t = new AnchorDefendEntity();
				t.setAnchorid(anchor);
				t.setUserid(users.get(i));
				t.setLevel(5);
				t.setStart_date(Tools.getDate("2019-10-16"));
				t.setEnd_date(Tools.getDate("2020-12-30"));
				t.setCreate_time(new Date());
				t.setUpdate_time(new Date());
				anchorDefendContract.insert(t);
				i++;
			}
		}
	}
	
	@Test
	public void testCreateAnchorEvaluations() throws Exception {
		PageModel pageModel = PageModel.getPageModel();
		pageModel.addQuery(Restrictions.ge("id", 100));
		List<AnchorDefendEntity> defends = anchorDefendContract.load(pageModel);
		if(Tools.isNotNull(defends)) {
			for (AnchorDefendEntity defend : defends) {
				//检测对应的是否有亲密关系值    没有就进行创建处理
				pageModel.clearAll();
				pageModel.addQuery(Restrictions.eq("anchor_userid", defend.getAnchorid()));
				pageModel.addQuery(Restrictions.eq("userid", defend.getUserid()));
				long count = anchorIntimateRankingsContract.count(pageModel);
				if(count == 0) {
					AnchorIntimateRankingsEntity t = new AnchorIntimateRankingsEntity();
					t.setAnchor_userid(defend.getAnchorid());
					t.setUserid(defend.getUserid());
					t.setTotal_money(getRandomNumber(50000, 100000));
					t.setUpdate_time(new Date());
					anchorIntimateRankingsContract.insert(t);
				}
			}
		}
	}
	
	public int getRandomNumber(int min, int max) {
		Random random = new Random();  
		int randomNumber =  random.nextInt(max)%(max-min+1) + min; 
		return randomNumber;
	}
}
